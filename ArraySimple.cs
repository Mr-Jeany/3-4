namespace _3_4;

public class ArraySimple<T> : ArrayBase
{
    private T[] _selfArray;
    private IGenerator<T> _selfElementGenerator;

    /// <summary>
    /// Creates a simple array.
    /// </summary>
    /// <param name="elementGenerator">generate used by this array. Must be the same type as array </param>
    /// <param name="userGenerated">true if array must be generated by the user. Optional </param>
    public ArraySimple(IGenerator<T> elementGenerator, bool userGenerated = false)
    {
        _selfElementGenerator = elementGenerator;
        Regenerate(userGenerated);
    }

    public override void PrintSelf()
    {
        foreach (var element in _selfArray)
        {
            Console.Write(element + " ");
        }
        Console.WriteLine();
    }

    protected override void GenerateByUser()
    {
        Console.Write("Write elements of your array separated by spaces: ");
        string[] input = Console.ReadLine().Split();
        _selfArray = new T[input.Length];
        for (int i = 0; i < input.Length; i++)
        {
            _selfArray[i] = (T)Convert.ChangeType(input[i], typeof(T));
        }
    }

    protected override void GenerateRandomly()
    {
        Random rand = new Random();
        _selfArray = new T[rand.Next(0, 10)];
        for (int i = 0; i < _selfArray.Length; i++)
        {
            _selfArray[i] = _selfElementGenerator.GetRandom();
        }
    }
}